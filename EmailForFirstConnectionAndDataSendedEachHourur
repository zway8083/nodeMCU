// Need to manually restart after new build and upload to make ESP.reset() works.
// Never forget to update the firmware version's variable "FW_VERSION" by incrementing it by 1.
// For update OTA : Compile the sketch (Ctrl+R) and then export the binary (Ctrl+Alt+S) into the same folder your sketch is.
// Need to build with :
// Flash size : 4M (1M SPIFFS)
// LwIP variant : v1.4 Prebuilt or Higher Bandwitdh

#include <ESP8266WiFi.h>
#include <ESP8266WiFiAP.h>
#include <ESP8266WiFiGeneric.h>
#include <ESP8266WiFiMulti.h>
#include <ESP8266WiFiScan.h>
#include <ESP8266WiFiSTA.h>
#include <ESP8266WiFiType.h>
#include <WiFiClient.h>
#include <WiFiClientSecure.h>
#include <WiFiServer.h>
#include <WiFiUdp.h>
//#include <TimeLib.h>
#include <NtpClientLib.h>
#include <ESP8266HTTPClient.h>
#include <ArduinoJson.h>
#include <ESP8266WebServer.h>
#include <DNSServer.h>
#include <EEPROM.h>
#include "FS.h"
#include <ESP8266httpUpdate.h>
//#include <Scheduler.h>

int FW_VERSION = 123455;
const char* fwUrlBase = "http://35.187.36.227:81/fota/";

//int n = 30;
//const size_t bufferSize = JSON_ARRAY_SIZE(n) + n*JSON_ARRAY_SIZE(8) + JSON_OBJECT_SIZE(1) + n*JSON_OBJECT_SIZE(4);
//const size_t bufferSize = JSON_ARRAY_SIZE(1) + JSON_ARRAY_SIZE(8) + JSON_OBJECT_SIZE(1) + JSON_OBJECT_SIZE(4);
size_t bufferSize2 = JSON_ARRAY_SIZE(1) + JSON_ARRAY_SIZE(8) + JSON_OBJECT_SIZE(2) + JSON_OBJECT_SIZE(3);
DynamicJsonBuffer JSONbuffer2(bufferSize2);   //Declaring static JSON buffer
JsonObject& JSONencoder2 = JSONbuffer2.createObject(); 
JsonArray& data = JSONencoder2.createNestedArray("data");


size_t bufferSize = JSON_ARRAY_SIZE(1) + JSON_ARRAY_SIZE(1) + JSON_OBJECT_SIZE(2); //+ JSON_ARRAY_SIZE(8) + JSON_ARRAY_SIZE(1)
DynamicJsonBuffer JSONbuffer(bufferSize);   //Declaring static JSON buffer
JsonObject& JSONencoder = JSONbuffer.createObject(); 
JsonArray& WiFiSSIDs = JSONencoder.createNestedArray("WiFiSSIDs");
JsonArray& WiFiPWDs = JSONencoder.createNestedArray("WiFiPWDs");


#define HISTORY_FILE "/WiFiConf.txt"
#define SERIAL_FILE "/SerialConf.txt"
//StaticJsonBuffer<288> JSONbuffer;   //Declaring static JSON buffer
int addrSSID = 0;
int addrPWD = 1;

ESP8266WebServer server(80);
IPAddress apIP(10, 10, 10, 1);
const byte DNS_PORT = 53;          // Capture DNS requests on port 53
DNSServer dnsServer;

String newHTML;
//String responseHTML = "<!DOCTYPE html>"
//  "<html lang=\"fr\">"
//  "<head>"
//    "<meta charset=\"utf-8\">"
//    "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">"
//    "<title>AFG Autisme</title>"
//  "</head>"
//  "<body>"
//  "<h1>AFG Autisme</h1>"
//  "<h2>Interface de provision WiFi</h2>"
//  "<form action='/' method='post'>"
//    "<div>"
//      "<label for='name'>SSID : </label>"
//      "<SELECT name='user_ssid' size='1'>";

char* device_id;

boolean isConfigure = false;
int APtime = 0;
int ConnectTime = 0;
const char* WiFiSSID; // = "testraspb"; //"micasa";
const char* WiFiPWD; // = "Raspberry2017"; //"1122334455";
const char* reWiFiSSID; 
const char* reWiFiPWD;

/////// Capteur PIR ///////
/////// Mode de mesure ////////
int sensorMode = 0;  // 0 : simple mouvement /// 1 : mouvement continu (possibilité de connaître la durée du mouvement)
// Pin digital connecté à la sortie du capteur PIR
int pirPin = 4;
//Temps de calibration (10-60 secs selon la datasheet)
int calibrationTime = 40;        
// Le temps que le capteur mets pour donner une impulsion LOW en output
long unsigned int lowIn;         
// Temps en millisecondes que le capteur doit être low pour que le mouvement s'arrête
long unsigned int pause = 10000; //60000; //5000;
// Conditions à vérifier
boolean lockLow = true;
boolean takeLowTime;

/////// Génération de la date avec NTP et algo pour économiser la batterie ///////
boolean syncOnce = false;
// Heure

long date;
// Temps depuis le démarrage du nodeMCU
long dateSinceStart;
// Variable temp pour calculer l'heure à chaque mesure
long tmp;
long tmpMillis;
long dateToMillis = 1000;
long actualDate;
boolean thisHour = false;
int timeForFirstConnection = 300000;

 
void setup() {
  //Serial.begin(9600);
  Serial.println("Hello");

  newHTML =addScanToHTML();

  SPIFFS.begin();  

  delay(1000);
  //WiFi.softAP(ssid, password);
  WiFi.mode(WIFI_AP);
 // WiFi.mode(WIFI_AP_STA);
  WiFi.softAPConfig(apIP, apIP, IPAddress(255, 255, 255, 0));
  WiFi.softAP("Ericsson Sleep Monitoring WiFi"); // WiFi name

  // if DNSServer is started with "*" for domain name, it will reply with
  // provided IP to all DNS request
  dnsServer.start(DNS_PORT, "*", apIP);

  // replay to all requests with same HTML
  server.serveStatic("/css", SPIFFS, "/css");
  server.serveStatic("/fonts", SPIFFS, "/fonts");
  server.onNotFound([]() {
    if (server.hasArg("device_serial")) {
      handleSubmitSerial();
    } else if (server.hasArg("user_ssid")) {
      handleSubmitConnection();
    } else {
      handleRoot();
    }
  });
  server.begin(); 
  Serial.println("Server listening");

  /////////// WiFi provision ////////////
  //APtime = millis();
  Serial.print("Attente de la provision du WiFi : ");
  //while (millis() < 120000 || isConfigure == false) {
  while (APtime < timeForFirstConnection) {
    if (WiFiSSID == NULL && WiFiPWD == NULL) {
      dnsServer.processNextRequest();
      server.handleClient();
      delay(500);
      Serial.print(".");
      APtime = millis();
    } else {
      APtime = 300000;
    }
  }

  delay(2000);
  // Déconnexion de l'AP
  WiFi.softAPdisconnect(true);
  delay(1000);

  loadHistorySerial ();
  Serial.print("Device id : ");
  Serial.println(device_id);

  // Lecture du fichier WiFiConf
  loadHistory();
//  JsonObject& root = loadHistory();
//  for (int i = 0; i < root["WiFiSSIDs"].size; i++) {
//    WiFiSSID = strdup(root["WiFiSSIDs"][i]);
//    WiFiPWD = strdup(root["WiFiPWDs"][i]);
//    Serial.println(WiFiSSID);
//    Serial.println(WiFiPWD);
//  }
  /////////// Connexion WiFi ////////////
  //wifi_connect(WiFiSSID, WiFiPWD);
  

  checkForUpdates();

  /////////// Serveur NTP ////////////
  Serial.println();
  Serial.println("Connexion au serveur NTP : ");
  NTP.onNTPSyncEvent([](NTPSyncEvent_t error) {
    if (error) {
      Serial.print("Time Sync error : ");
      if (error == noResponse){
        Serial.println("NTP server not reachable");
      }else if (error == invalidAddress){
        Serial.println("Invalid NTP server address");
      }
    } else {
      if (syncOnce == false) {
        syncOnce = true;
        // Affichages pour demonstration des méthodes NTP
//        Serial.print("Voici la date et l'heure : ");
//        Serial.println(NTP.getTimeDateString(NTP.getLastNTPSync()));
//        Serial.print("Voici la date : ");
//        Serial.println(NTP.getDateStr(NTP.getLastNTPSync()));
//        Serial.print("Voici l'heure : ");
//        Serial.println(NTP.getTimeStr(NTP.getLastNTPSync()));
        Serial.print("Voici le timestamp : "); 
        Serial.println(NTP.getLastNTPSync());
        Serial.println();
        // Code pour algo d'incrémentation de l'heure
        date = NTP.getLastNTPSync(); // date <== timestamp
        dateSinceStart = millis();
      }
    }
  });

  while (syncOnce == false) {
    NTP.begin("pool.ntp.org", 1, true);
    //NTP.begin("146.11.116.133");
    delay(1000);
  }

  // Arrêt du serveur NTP
  NTP.stop();
  delay(1000);

  wifi_disconnect();

  /////////// Calibration du capteur PIR ////////////
  pinMode(pirPin, INPUT_PULLUP);
  //digitalWrite(pirPin, LOW);
  // Le temps de calibrer le capteur PIR ...
//  delay(1000);
//  Serial.println();
//  Serial.print("Calibration du capteur ");
//  for(int i = 0; i < calibrationTime; i++){
//    Serial.print(".");
//    delay(1000);
//  }
//  Serial.println(" Terminé");
//  Serial.println("Capteur actif");
//  delay(50);


//Serial.println("je vais dormir pour 30 secondes a partir de maintenant");
//ESP.deepSleep(30000000); //30 secondes de deep sleep
}




void loop() {
  actualDate = date + ((millis() - dateSinceStart)/1000);
  if (actualDate%3600 <= 10) {
    thisHour = true;
    simple_wifi_connect(WiFiSSID, WiFiPWD);
    yield();
    send_message(tmp, 1, thisHour, device_id);
    yield();
    Serial.println(WiFi.status());
    wifi_disconnect();
    yield();
    //send_message(tmp, 1, thisHour, device_id);
    thisHour = false;
  }
  
  if (actualDate%604800 >= 459000 && actualDate%604800 <= 459020) {
    simple_wifi_connect(WiFiSSID, WiFiPWD);
    if (WiFi.status() == WL_CONNECTED){
      checkForUpdates();
      wifi_disconnect();
    }
  }
  
  //print(node.heap());
  yield();
  //Serial.println(ESP.getFreeHeap());
  //ESP.getFreeHeap();
  if (sensorMode == 0) {
    if(lockLow){
      if(digitalRead(pirPin) == LOW){
        // lockLow permet d'assurer la  transition à LOW avant de mesurer tout mouvements en output
        lockLow = false; 
        tmp = date + ((millis() - dateSinceStart)/1000);  
        tmpMillis = millis();         
        Serial.println("---");
        Serial.print("Mouvement détecté : ");
        Serial.println(tmp);
        thisHour=true;
        prepareJson(tmp, device_id);
        simple_wifi_connect(WiFiSSID, WiFiPWD);
        yield();
        send_message(tmp, 1, thisHour, device_id);
        yield();
        Serial.println(WiFi.status());
        wifi_disconnect();
        //simple_wifi_connect(WiFiSSID, WiFiPWD);
        //yield();
        prepareJson(tmp, device_id);
        //yield();
        //Serial.println(WiFi.status());
        //wifi_disconnect();
        //yield();
        Serial.println(WiFi.status());
        Serial.print(pause/1000);
        Serial.print(" secondes d'attente avant le prochain mouvement : ");
      } 
    } else {
      yield();  
      Serial.print(".");
      if((tmp + (millis()-tmpMillis)/1000) >= (tmp + pause/1000)) {
        yield();
        Serial.println();
        Serial.println("Un nouveau mouvement peut maintenant être mesuré");
        lockLow = true;
      }
      yield();
    }   
  } else {
    if(digitalRead(pirPin) == LOW){
      if(lockLow){  
        // lockLow permet d'assurer la transition à LOW avant de mesurer tout mouvements en output
        lockLow = false; 
        tmp = date + ((millis() - dateSinceStart)/1000);           
        Serial.println("---");
        Serial.print("Mouvement détecté : ");
        Serial.println(tmp);
        delay(50);
        prepareJson(tmp, device_id);
      }         
      takeLowTime = true;
    } 
  
    if(digitalRead(pirPin) == HIGH){       
      if(takeLowTime){
        lowIn = millis();          // Compte le temps de transition entre HIGH et LOW
        takeLowTime = false;       // Assure que cela est réalisé au départ d'une phase LOW
      }
      // Si le capteur reste à LOW pendant plus longtemps que la pause fixée (5sec), alors on assume qu'il n'y a plus de mouvements
      if(!lockLow && millis() - lowIn > pause){  
        // Ce code s'effectue seulement après un mouvement
        lockLow = true;
        tmp = date + ((millis() - dateSinceStart)/1000);                     
        Serial.print("Mouvement terminé : ");
        Serial.println(tmp - (pause/1000));
        delay(50);
      }
    }
  }
  yield();
}





void handleRoot() {
  server.send(200, "text/html", newHTML);
}

void handleSubmit() {
  String SSIDvalue;
  String PWDvalue;

  if (!server.hasArg("user_ssid")) return returnFail("BAD ARGS");
  
  if (server.args() > 0 ) {
    // SSID
    SSIDvalue = server.arg("user_ssid");
    WiFiSSID = strdup(SSIDvalue.c_str());

    // Password
    PWDvalue = server.arg("user_pwd");
    WiFiPWD = strdup(PWDvalue.c_str());

    WiFi.begin(WiFiSSID, WiFiPWD);
    Serial.print("En attente de connexion ");
    int thisTime = millis();
    int timeToConnect = 0;
    String message;
    while (timeToConnect < thisTime + 10000) {
      if (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
        timeToConnect = millis();
      } else {
        timeToConnect = thisTime + 10000;
      }
    }
    if (WiFi.status() == WL_CONNECTED) {  
      loadThenSaveHistory(WiFiSSID, WiFiPWD);
      //loadHistorySerial ();
      //send_confirmation_connection(device_id);
      
      message = "Configuration du WiFi prise en compte.\r\n Si l'AP disparait : Connexion WiFi OK.\r\n Si l'AP persiste : Connexion WiFi NOK.\r\n";
    } else {
      message = "FAILED!\r\n TRY TO CONNECT AGAIN";
    }
    
    returnMessage(message);
    
    if (message == "FAILED!\r\n TRY TO CONNECT AGAIN") {
      ESP.reset();
    } else {
      wifi_disconnect();
    }
  }
}

void handleSubmitConnection() {
  String SSIDvalue;
  String PWDvalue;

  if (!server.hasArg("user_ssid")) return returnFail("BAD ARGS");
  
  if (server.args() > 0 ) {
    // SSID
    SSIDvalue = server.arg("user_ssid");
    WiFiSSID = strdup(SSIDvalue.c_str());

    // Password
    PWDvalue = server.arg("user_pwd");
    WiFiPWD = strdup(PWDvalue.c_str());

    WiFi.begin(WiFiSSID, WiFiPWD);
    Serial.print("En attente de connexion ");
    int thisTime = millis();
    int timeToConnect = 0;
    String message;
    while (timeToConnect < thisTime + 10000) {
      if (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
        timeToConnect = millis();
      } else {
        timeToConnect = thisTime + 10000;
      }
    }
    if (WiFi.status() == WL_CONNECTED) {  
      // Create JSON
//      JsonObject& JSONencoder = JSONbuffer.createObject();
//      JSONencoder["SSID"] = WiFiSSID;
//      JSONencoder["PWD"] = WiFiPWD;
//      char JSONWiFiBuffer[288];
//      JSONencoder.prettyPrintTo(JSONWiFiBuffer, sizeof(JSONWiFiBuffer));

      //WiFiSSIDs.add(WiFiSSID);
      //WiFiPWDs.add(WiFiPWD);

      //JSONencoder.printTo(Serial);
      //String WiFiOutput;
      //JSONencoder.printTo(WiFiOutput);
      
      // Store JSON in WiFiConf file
      //saveHistory(JSONencoder);
      Serial.println(" Connecté !");
      Serial.print("SSID : ");
      Serial.println(WiFi.SSID());
      Serial.print("Addresse IP : ");
      Serial.println(WiFi.localIP());
      Serial.print("Adresse MAC : ");
      Serial.println(WiFi.macAddress());
      Serial.print("Puissance (dB) : ");
      Serial.println(WiFi.RSSI());
      loadThenSaveHistory(WiFiSSID, WiFiPWD);
      loadHistorySerial ();
      send_confirmation_connection(device_id);
      
      message = "Configuration du WiFi prise en compte.\r\n Si l'AP disparait : Connexion WiFi OK.\r\n Si l'AP persiste : Connexion WiFi NOK.\r\n";
    } else {
      message = "FAILED!\r\n TRY TO CONNECT AGAIN";
    }
    
    returnMessage(message);
    
    if (message == "FAILED!\r\n TRY TO CONNECT AGAIN") {
      ESP.reset();
    } else {
      wifi_disconnect();
    }
  }
}

void handleSubmitSerial() {
  String serialNumber;
  String message;

  if (!server.hasArg("device_serial")) return returnFail("BAD ARGS");
  
  if (server.args() > 0 ) {
    // Serial Number
    serialNumber = strdup(server.arg("device_serial").c_str());

      // Store JSON in WiFiConf file
      saveHistorySerial(serialNumber);
      //loadThenSaveHistory(WiFiSSID, WiFiPWD);
      
      message = "Configuration du numéro de serie prise en compte.\r\n Configurez maintenant le WiFi.\r\n Vous avez ecris le numero : " +  serialNumber;
  } else {
      message = "FAILED!\r\n TRY AGAIN";
  } 
  returnMessage(message);
}

void returnMessage(String msg) {
  server.sendHeader("Connection", "close");
  server.sendHeader("Access-Control-Allow-Origin", "*");
  server.send(200, "text/plain", msg + "\r\n");
}

void returnFail(String msg) {
  server.sendHeader("Connection", "close");
  server.sendHeader("Access-Control-Allow-Origin", "*");
  server.send(500, "text/plain", msg + "\r\n");
}






void first_wifi_connect(const char* WiFiSSID, const char* WiFiPWD) {
  Serial.println();
  Serial.println("Connexion au WiFi : ");
  
  // Scan des réseaux
  Serial.print("Nombre de réseaux : ");
  Serial.println(WiFi.scanNetworks());
  delay(500);
  
  // Affichage des SSIDs
  Serial.println("Liste des SSIDs : ");
  int n = WiFi.scanNetworks();
  for (int i = 0; i < n; i++){
    Serial.println(WiFi.SSID(i));
  }
  
  Serial.println();
  // Connexion au SSID souhaité
  WiFi.begin(WiFiSSID, WiFiPWD);
  Serial.print("En attente de connexion ");
  int thisTime = millis();
  while (ConnectTime < thisTime + 10000) {
    if (WiFi.status() != WL_CONNECTED) {
      delay(500);
      Serial.print(".");
      ConnectTime = millis();
    } else {
      ConnectTime = thisTime + 10000;
    }
  }
  if (WiFi.status() == WL_CONNECTED) {
    // Connexion réussie : affichage des paramètres
    Serial.println(" Connecté !");
    Serial.print("SSID : ");
    Serial.println(WiFi.SSID());
    Serial.print("Addresse IP : ");
    Serial.println(WiFi.localIP());
    Serial.print("Adresse MAC : ");
    Serial.println(WiFi.macAddress());
    Serial.print("Puissance (dB) : ");
    Serial.println(WiFi.RSSI());
  }
}


void wifi_connect(const char* WiFiSSID, const char* WiFiPWD) {
  Serial.println();
  Serial.println("Connexion au WiFi : ");
  
  // Scan des réseaux
  Serial.print("Nombre de réseaux : ");
  Serial.println(WiFi.scanNetworks());
  delay(500);
  
  // Affichage des SSIDs
  Serial.println("Liste des SSIDs : ");
  int n = WiFi.scanNetworks();
  for (int i = 0; i < n; i++){
    Serial.println(WiFi.SSID(i));
  }
  
  Serial.println();
  // Connexion au SSID souhaité
  WiFi.begin(WiFiSSID, WiFiPWD);
  Serial.print("En attente de connexion ");
  int thisTime = millis();
  while (ConnectTime < thisTime + 10000) {
    if (WiFi.status() != WL_CONNECTED) {
      delay(500);
      Serial.print(".");
      ConnectTime = millis();
    } else {
      ConnectTime = thisTime + 10000;
    }
  }
  if (WiFi.status() == WL_CONNECTED) {
    // Connexion réussie : affichage des paramètres
    Serial.println(" Connecté !");
    Serial.print("SSID : ");
    Serial.println(WiFi.SSID());
    Serial.print("Addresse IP : ");
    Serial.println(WiFi.localIP());
    Serial.print("Adresse MAC : ");
    Serial.println(WiFi.macAddress());
    Serial.print("Puissance (dB) : ");
    Serial.println(WiFi.RSSI());
  } else {
    //ESP.reset();
    newHTML =addScanToHTML();
    
    WiFi.mode(WIFI_AP);
    WiFi.softAPConfig(apIP, apIP, IPAddress(255, 255, 255, 0));
    WiFi.softAP("Ericsson Sleep Monitoring WiFi"); // WiFi name
    dnsServer.start(DNS_PORT, "*", apIP);
    server.onNotFound([]() {
      if (server.hasArg("user_ssid")) {
        handleSubmit();
      } else {
        handleRoot();
      }
    });
    server.begin(); 
    Serial.println("Server listening");
  
    /////////// WiFi provision ////////////
    APtime = 0;
    int errorTime = millis();
    const char* testSSID = WiFiSSID;
    const char* testPWD = WiFiPWD;
    Serial.print("Attente de la provision du WiFi : ");
    while (APtime < errorTime + 60000) {
      if (WiFiSSID == testSSID && WiFiPWD == testPWD) {
        dnsServer.processNextRequest();
        server.handleClient();
        delay(500);
        Serial.print(".");
        APtime = millis();
      } else {
        APtime = errorTime + 60000;
      }
    }

    WiFi.softAPdisconnect(true);
    
    // Lecture du fichier WiFiConf
    delay(1000);
    reloadHistory();
    /////////// Connexion WiFi ////////////
    delay(1000);
    Serial.print(reWiFiSSID);
    Serial.print(reWiFiPWD);
    wifi_connect(reWiFiSSID, reWiFiPWD);
  }
}


void simple_wifi_connect(const char* WiFiSSID, const char* WiFiPWD) {
  Serial.println();
  // Permet se reconnecté après avoir déconnecté le WiFi Station
  WiFi.forceSleepWake();
  delay(1);
  WiFi.mode(WIFI_STA);
  yield();  
  //
  Serial.println("Connexion au WiFi : ");
  WiFi.begin(WiFiSSID, WiFiPWD);
  Serial.print("En attente de connexion ");
  while (WiFi.status() != WL_CONNECTED) {
      //delay(500);
      yield();
      Serial.print(".");
  }
  if (WiFi.status() == WL_CONNECTED) {
    // Connexion réussie : affichage des paramètres
    Serial.println(" Connecté !");
    Serial.print("SSID : ");
    Serial.println(WiFi.SSID());
    Serial.print("Addresse IP : ");
    Serial.println(WiFi.localIP());
    Serial.print("Adresse MAC : ");
    Serial.println(WiFi.macAddress());
    Serial.print("Puissance (dB) : ");
    Serial.println(WiFi.RSSI());
  } else {
    simple_wifi_connect(WiFiSSID, WiFiPWD);
  }
  yield();
  return;
}

void wifi_disconnect() {
  WiFi.disconnect();
  yield();
  WiFi.mode(WIFI_OFF);
  yield();
  WiFi.forceSleepBegin();
  yield();
  return;
}

String prepareJson(long date, char* device_id){
    data.add(date-7200);
    JsonArray& serial = JSONencoder2.createNestedArray("serial");

    loadHistorySerial ();
    char* id = device_id;
    char *token = NULL;
    for(token = strtok(id,"-");token != NULL;token = strtok(NULL,"-")){
      serial.add(token);
    }
    
    JSONencoder2["type"] = "motion";
    JSONencoder2.printTo(Serial);
}

DynamicJsonBuffer JSONbuffer3(bufferSize2);
JsonObject& JSONencoder3 = JSONbuffer3.createObject(); 
JsonArray& first_connect = JSONencoder3.createNestedArray("data");

void send_confirmation_connection(char* device_id){
  first_connect.add(42);
  JsonArray& serial = JSONencoder3.createNestedArray("serial");
  //loadHistorySerial ();  
  char* id = device_id;
  char *token = NULL;
  for(token = strtok(id,"-");token != NULL;token = strtok(NULL,"-")){
      serial.add(token);
  }
  JSONencoder3["type"] = "motion";
  //JSONencoder3.printTo(Serial);
    
  String first_connection;
    JSONencoder3.printTo(first_connection);
    Serial.println("first_connection :" + first_connection);
    HTTPClient http;    //Declare object of class HTTPClient
    http.begin("http://35.187.36.227/api/event2");      //Specify request destination   En local 100.93.130.233 en vrai 
    http.addHeader("Content-Type", "application/json");  //Specify content-type header
    int httpCode = http.POST(first_connection);   //Send the request
    if(httpCode > 0) {
      // HTTP header has been send and Server response header has been handled
      Serial.printf("[HTTP] GET... code: %d\n", httpCode);
      // Message found at serve
      if(httpCode != 201) {
        String payload = http.getString();
        Serial.println(payload);
      } else {
        Serial.println("Value first connection sended");
        JSONbuffer3.clear();
      }
   } else {
      Serial.printf("[HTTP] GET... failed, error: %s\n", http.errorToString(httpCode).c_str());
  } 
  http.end();  //Close connection
}


  
void send_message(long date, int value, boolean thisHour, char* device_id) {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("Error in WiFi connection");
    //wifi_connect(WiFiSSID, WiFiPWD);
  }
  
  //if (WiFi.status() == WL_CONNECTED) { //Check WiFi connection status
    // JSON qui regroupe les mouvements et envoi toutes les heures
//    data.add(date);
//    JsonArray& serial = JSONencoder2.createNestedArray("serial");
//
//    loadHistorySerial ();
//    char* id = device_id;
//    char *token = NULL;
//    for(token = strtok(id,"-");token != NULL;token = strtok(NULL,"-")){
//      serial.add(token);
//    }
//    
//    JSONencoder2["type"] = "motion";
//    JSONencoder2.printTo(Serial);
//
//    String output;
//    JSONencoder2.printTo(output);
//    Serial.println("output :" + output);
  
    String output;
    JSONencoder2.printTo(output);
    Serial.println("output :" + output);

    if (data.size() == 125 || thisHour == true) {
      
      HTTPClient http;    //Declare object of class HTTPClient
   
      http.begin("http://35.187.36.227/api/event2");      //Specify request destination
      http.addHeader("Content-Type", "application/json");  //Specify content-type header
      
      int httpCode = http.POST(output);   //Send the request

      if(httpCode > 0) {
        // HTTP header has been send and Server response header has been handled
        Serial.printf("[HTTP] GET... code: %d\n", httpCode);
  
        // Message found at server
        if(httpCode != 201) {
            String payload = http.getString();
            Serial.println(payload);
        } else {
          Serial.println("Data sended");
          JSONbuffer2.clear();
          JsonObject& JSONencoder2 = JSONbuffer2.createObject(); 
          JsonArray& data = JSONencoder2.createNestedArray("data");
        }
      } else {
          Serial.printf("[HTTP] GET... failed, error: %s\n", http.errorToString(httpCode).c_str());
      } 
      http.end();  //Close connection
      
//      JSONbuffer2.clear();
//      JsonObject& JSONencoder2 = JSONbuffer2.createObject(); 
//      JsonArray& data = JSONencoder2.createNestedArray("data");
    }
  //} else {
  //  Serial.println("Error in WiFi connection");
  //}
  //yield();
  //return;
}




void saveHistory(JsonObject& WiFiConf){ 
  Serial.println("Ecriture du fichier WiFiConf");
  File historyFile = SPIFFS.open(HISTORY_FILE, "w");
  WiFiConf.printTo(historyFile); // Exporte et enregsitre le JSON dans la zone SPIFFS - Export and save JSON object to SPIFFS area
  historyFile.close();  
}

void saveHistorySerial (String serialNumber){ 
  Serial.println("Ecriture du fichier SerialConf");
  File historyFile = SPIFFS.open(SERIAL_FILE, "w");
  StaticJsonBuffer<200> jsonBuffer;
  JsonObject& root = jsonBuffer.createObject();
  root["serial"] = serialNumber;
  
  root.printTo(Serial);
  String serialOutput;
  root.printTo(serialOutput);
  //serialNumber.printTo(historyFile); // Exporte et enregsitre le JSON dans la zone SPIFFS - Export and save JSON object to SPIFFS area
  root.printTo(historyFile);
  historyFile.close();  
}

void loadHistorySerial (){
  File file = SPIFFS.open(SERIAL_FILE, "r");
  if (!file){
    Serial.println("Aucun fichier SerialConf existe");
  } else {
    size_t size = file.size();
    if ( size == 0 ) {
      Serial.println("Fichier SerialConf vide !");
    } else {
      std::unique_ptr<char[]> buf (new char[size]);
      file.readBytes(buf.get(), size);
      JsonObject& root1 = JSONbuffer.parseObject(buf.get());
      if (!root1.success()) {
        Serial.println("Impossible de lire le JSON SerialConf");
      } else {
        Serial.println("JSON SerialConf à été chargé : ");
        root1.printTo(Serial);
        device_id = strdup(root1["serial"]);
      }
    }
    file.close();
  }
}

void loadHistory(){
  File file = SPIFFS.open(HISTORY_FILE, "r");
  if (!file){
    Serial.println("Aucun fichier WiFiConf existe");
  } else {
    size_t size = file.size();
    if ( size == 0 ) {
      Serial.println("Fichier WiFiConf vide !");
    } else {
      std::unique_ptr<char[]> buf (new char[size]);
      file.readBytes(buf.get(), size);
      JsonObject& root = JSONbuffer.parseObject(buf.get());
      if (!root.success()) {
        Serial.println("Impossible de lire le JSON WiFiConf");
      } else {
        Serial.println("JSON WiFiConf à été chargé : ");
        root.printTo(Serial);
        //WiFiSSID = strdup(root["WiFiSSIDs"][0]);
        //WiFiPWD = strdup(root["WiFiPWDs"][0]);
        int rootSize = root["WiFiSSIDs"].size();
        int i = rootSize-1;
        Serial.println(i);
        while(WiFi.status() != WL_CONNECTED && i >= 0) {
        //for (int i = 0; i < rootSize; i++) {
          WiFiSSID = strdup(root["WiFiSSIDs"][i]);
          WiFiPWD = strdup(root["WiFiPWDs"][i]);
          Serial.println(WiFiSSID);
          Serial.println(WiFiPWD);
          first_wifi_connect(WiFiSSID, WiFiPWD);
          i = i - 1;
        }
      }
    }
    file.close();
  }
}

void reloadHistory(){
  File file = SPIFFS.open(HISTORY_FILE, "r");
  if (!file){
    Serial.println("Aucun fichier WiFiConf existe");
  } else {
    size_t size = file.size();
    if ( size == 0 ) {
      Serial.println("Fichier WiFiConf vide !");
    } else {
      std::unique_ptr<char[]> buf (new char[size]);
      file.readBytes(buf.get(), size);
      JsonObject& root = JSONbuffer.parseObject(buf.get());
      if (!root.success()) {
        Serial.println("Impossible de lire le JSON WiFiConf");
      } else {
        Serial.println("JSON WiFiConf à été chargé : ");
        root.printTo(Serial);
        reWiFiSSID = strdup(root["SSID"]);
        reWiFiPWD = strdup(root["PWD"]);
      }
    }
    file.close();
  }
}

void loadThenSaveHistory(const char* WiFiSSID, const char* WiFiPWD){
  size_t bufferSize1 = JSON_ARRAY_SIZE(1) + JSON_ARRAY_SIZE(1) + JSON_OBJECT_SIZE(2); //+ JSON_ARRAY_SIZE(8) + JSON_ARRAY_SIZE(1)
  DynamicJsonBuffer JSONbuffer1(bufferSize1);   //Declaring static JSON buffer
  JsonObject& JSONencoder1 = JSONbuffer1.createObject(); 
  JsonArray& WiFiSSIDs = JSONencoder1.createNestedArray("WiFiSSIDs");
  JsonArray& WiFiPWDs = JSONencoder1.createNestedArray("WiFiPWDs");
        
  File file = SPIFFS.open(HISTORY_FILE, "r");
  if (!file){
    Serial.println("Aucun fichier WiFiConf existe");
  } else {
    size_t size = file.size();
    if ( size == 0 ) {
      Serial.println("Fichier WiFiConf vide !");
    } else {
      std::unique_ptr<char[]> buf (new char[size]);
      file.readBytes(buf.get(), size);
      JsonObject& root = JSONbuffer.parseObject(buf.get());
      if (!root.success()) {
        Serial.println("Impossible de lire le JSON WiFiConf");
      } else {  
        Serial.println("JSON WiFiConf à été chargé : ");
        root.printTo(Serial);
        for (int i = root["WiFiSSIDs"].size(); i >= 0; i--) {
          WiFiSSIDs.add(root["WiFiSSIDs"][i]);
          WiFiPWDs.add(root["WiFiPWDs"][i]);
        }
      }
    }
    file.close();
  }
  WiFiSSIDs.add(WiFiSSID);
  WiFiPWDs.add(WiFiPWD);
  
  Serial.println("Ecriture du fichier WiFiConf");
  File historyFile = SPIFFS.open(HISTORY_FILE, "w");
  JSONencoder1.printTo(historyFile); // Exporte et enregsitre le JSON dans la zone SPIFFS - Export and save JSON object to SPIFFS area
  historyFile.close();
}


String addScanToHTML(){
  String responseHTML = "<!DOCTYPE html>"
  "<html>"
    "<head>"
      "<meta charset='utf-8'>"
      "<meta name='viewport' content='width=device-width, initial-scale=1'>"
      "<link href='css/bootstrap.min.css' rel='stylesheet' />"
      "<title id='pageTitle'>WiFi Provision</title>"
    "</head>"
    "<style>"
      "body {"
       "background-color: #f5f5f5;"
      "}"

      "#main-content {"
        "padding: 1em 1em;"
        "margin: 0 auto 20px;"
        "background-color: #fff;"
        "border: 1px solid #e5e5e5;"
        "-webkit-border-radius: 5px;"
        "-moz-border-radius: 5px;"
        "border-radius: 5px;"
      "}"
    "</style>"
    "<body>"
      "<div>"
        "<nav class='navbar navbar-inverse bg-inverse'>"
          "<div class='container-fluid'>"
            "<div class='navbar-header'>"
              "<a class='navbar-brand' style='padding-right: 0px;' href='#'>AFG Autisme</a>"
              "<i style='color: white;'>(beta)</i>"
            "</div>"
          "</div>"
        "</nav>"
      "</div>"

      "<div id='main-content' class='container'>"
        "<h1>Provision Interface</h1>"
        "<h2>Étape 1</h2>"
        "<p> Veuillez renseigner le numéro du capteur que vous avez obtenu sur le site <em>http://ericsson.afg-autisme.com</em> dans l'onglet <em>Mes Capteurs</em> </p> "
        "<h3>Serial Number : </h3>"
        "<form id='formserial' class='form' action='/' method='post'>"
          "<div class='row'>"
            "<div class='form-group col-md-4'>"
              "<label for='name' class='control-label'>New serial code : </label>"
              "<input id='password' class='form-control' type='text' name='device_serial' placeholder=\"XXX-XXX-XXX-XXX-XXX-XXX-XXX-XXX\" pattern=\"\\d\\d\\d-\\d\\d\\d-\\d\\d\\d-\\d\\d\\d-\\d\\d\\d-\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\" maxlength='31'>"
              "<p> Seuls les chiffres sont acceptés (Pas de lettres). Veillez à respecter le format suivant : XXX-XXX-XXX-XXX-XXX-XXX-XXX-XXX. </p>"
            "</div>"
          "</div>"
          "<div class='row'>"
            "<div class='col-md-4'>"
              "<div class='form-group pull-right'>"
                "<button class='btn btn-success' type='submit'><span class='glyphicon glyphicon-ok'></span> Save</button>"
              "</div>"
            "</div>"
          "</div>"  
        "</form>"
        "<h2>Étape 2</h2>"
        "<p> Veuillez renseigner les coordonnées de votre box internet. Le <strong>SSID</strong> correspond au nom de votre box et le <strong>Password</strong> est votre mot de passe.</p> "
        "<h3>Données relatives au WiFi : </h3>"
        "<form class='form' action='/' method='post'>"
          "<div class='row'>"
            "<div class='form-group col-md-4'>"
              "<label for='name' class='control-label'>SSID : </label>"
              "<SELECT name='user_ssid' size='1' id='user_ssid' class='form-control'>";
              int n = WiFi.scanNetworks();
              newHTML = responseHTML;
              for (int j = 0; j < n; j++){
                newHTML += "<OPTION>";
                newHTML += WiFi.SSID(j);
              }
              newHTML += "</SELECT>"
            "</div>"
          "</div>"
          "<div class='row'>"
            "<div class='form-group col-md-4'>"
              "<label for='password' class='control-label'>Password : </label>"
              "<input id='password' class='form-control' type='password' name='user_pwd'>"
            "</div>"
          "</div>"
          "<div class='row'>"
            "<div class='col-md-4'>"
              "<div class='form-group pull-right'>"
                "<button class='btn btn-success' type='submit'><span class='glyphicon glyphicon-ok'></span> Connect device</button>"
              "</div>"
            "</div>"
          "</div>"
        "</form>"   
      "</div>"
    "</body>"
  "</html>";
  return newHTML;
}


void checkForUpdates() {
  //String mac = getMAC();
  String fwVersionURL = String(fwUrlBase);
  fwVersionURL.concat("last_current.version");

  Serial.println("Checking for firmware updates.");
  Serial.print("Firmware version URL to download : ");
  Serial.println(fwVersionURL);

  HTTPClient httpClient;
  httpClient.begin(fwVersionURL);
  int httpCode = httpClient.GET();
  if(httpCode == 200) {
    String newFWVersion = httpClient.getString();
    Serial.print( "Check for new version : " );
    int newVersion = newFWVersion.toInt();
    if(newVersion > FW_VERSION) {
      Serial.println("Preparing to update");
      String fwImageURL = fwUrlBase;
      fwImageURL.concat("SleepBoxFirmware.bin");
      //fwImageURL.concat(newVersion);
      //fwImageURL.concat(".bin");
      Serial.println(fwImageURL);
      t_httpUpdate_return ret = ESPhttpUpdate.update(fwImageURL);

      switch(ret) {
        case HTTP_UPDATE_FAILED:
          Serial.printf("HTTP_UPDATE_FAILD Error (%d): %s", ESPhttpUpdate.getLastError(), ESPhttpUpdate.getLastErrorString().c_str());
          break;
        case HTTP_UPDATE_NO_UPDATES:
          Serial.println("HTTP_UPDATE_NO_UPDATES");
          break;
      }
      ESP.reset();
    }
    else {
      Serial.println( "Already on latest version" );
    }
  }
  else {
    Serial.print( "Firmware version check failed, got HTTP response code " );
    Serial.println( httpCode );
  }
  httpClient.end();
  //wifi_disconnect();
}
